enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
  VALIDATION
}

union ChangePasswordError = ValidationError | WrongPasswordError

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type ChangePasswordPayload {
  errors: [ChangePasswordError!]
  organizer: Organizer
}

input ChecklistInput {
  checklistItems: [ChecklistItemInput!]!
  id: UUID
  title: String!
}

input ChecklistItemInput {
  done: Boolean!
  title: String!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

union EditOrganizerError = ValidationError

input EditOrganizerInput {
  fullName: String
  username: String
}

type EditOrganizerPayload {
  errors: [EditOrganizerError!]
  organizer: Organizer
}

interface Error {
  message: String!
}

input EventInput {
  address: String
  checklists: [ChecklistInput!]
  description: String
  eventId: UUID
  startDateTimeUtc: DateTime
  title: String
}

type GqlChecklist {
  id: UUID!
  items: [GqlChecklistItem!]!
  title: String!
}

type GqlChecklistItem {
  done: Boolean!
  title: String!
}

type GqlEvent {
  address: String
  changedAtUtc: DateTime!
  checklists: [GqlChecklist!]!
  createdAtUtc: DateTime!
  creator: Organizer!
  description: String
  id: UUID!
  startAtUtc: DateTime
  title: String!
}

type GqlToken {
  token: String!
}

type KeyValuePairOfStringAndObject {
  key: String!
}

union LoginError = UserNameShouldBeFilledError | UserNotFoundByUsernameError | WrongPasswordError

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  errors: [LoginError!]
  gqlToken: GqlToken
}

type Mutation {
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload!
  editOrganizer(input: EditOrganizerInput!): EditOrganizerPayload!
  login(input: LoginInput!): LoginPayload!
  registerOrganizer(input: RegisterOrganizerInput!): RegisterOrganizerPayload!
  saveEvent(input: SaveEventInput!): SaveEventPayload!
}

type Organizer {
  fullname: String!
  id: String!
  username: String!
}

type Query {
  authorized: Boolean!
  event(eventId: String!): GqlEvent
  events(page: Int!): [GqlEvent!]!
  organizer: Organizer
  organizerByUsername(username: String!): Organizer
}

union RegisterOrganizerError = ValidationError

input RegisterOrganizerInput {
  fullName: String!
  password: String!
  username: String!
}

type RegisterOrganizerPayload {
  errors: [RegisterOrganizerError!]
  organizer: Organizer
}

union SaveEventError = UnauthorizedAccessError | ValidationError

input SaveEventInput {
  input: EventInput!
}

type SaveEventPayload {
  errors: [SaveEventError!]
  gqlEvent: GqlEvent
}

enum Severity {
  ERROR
  INFO
  WARNING
}

scalar UUID

type UnauthorizedAccessError implements Error {
  message: String!
}

type UserNameShouldBeFilledError implements Error {
  message: String!
}

type UserNotFoundByUsernameError implements Error {
  message: String!
}

type ValidationError implements Error {
  errors: [ValidationFailure]
  message: String!
}

type ValidationFailure {
  errorCode: String
  errorMessage: String
  formattedMessagePlaceholderValues: [KeyValuePairOfStringAndObject!]
  propertyName: String
  severity: Severity!
}

type WrongPasswordError implements Error {
  message: String!
}
